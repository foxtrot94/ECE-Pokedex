package me.quadphase.qpdex.pokemon;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : QPdex (C) 2015
//  @ File Name : Party.java
//  @ Date : 21-Jul-15
//  @ Author : Nicole
//
//


import me.quadphase.qpdex.databaseAccess.PokemonFactory;

/**
 * These <code>Pokemon</code> are in your party. They each have a particular set of moves.
 */
public class Party {

    /**
     * Max: 6
     */
    private Pokemon[] pokemon;

    /**
     * 1 move set per Pokemon in the <code>pokemon</code> list
     */
    private MoveSet[] moveSets;

    /**
     * Constructor to make an empty party for up to 6 pokemon
     */
    public Party() {
        this.pokemon = new Pokemon[6];
        this.moveSets = new MoveSet[6];
    }

    /**
     * Adds a pokemon to the pokemon party.
     *
     * @param p - pokemon to be added
     * @param m - {@link MoveSet } that contains up to 4 moves that the pokemon knows
     * @return <code>true</code> if there was a spot available and the pokemon is successfully added
     * <code>false</code> if the party already had 6 pokemon, so the pokemon is not added
     */
    public boolean addPokemonToParty(Pokemon p, MoveSet m) {
        int partyID = firstAvailableSpotInParty();
        if (partyID != 0) {
            // TODO: Add the pokemon to the party with its moveset
            PokemonFactory pokemonFactory = PokemonFactory.getPokemonFactory(/*context*/null);
            try {
                pokemonFactory.addPokemonToParty(partyID, p.getPokemonUniqueID(), m);
            } catch (Exception e) {
                // do something
            }
            return true;
        } else {
            return false;
        }
    }

    /**
     * Counts the number of pokemon that are currently in the party.
     *
     * @return the number of occupied spots in the party
     */
    private int countPokemonInParty() {
        int totalPokemon = 0;
        for (int i = 0; i < 6; i++) {
            if (pokemon[i] != null) {
                totalPokemon++;
            }
        }
        return totalPokemon;
    }

    private int firstAvailableSpotInParty() {
        for (int i = 0; i < 6; i++) {
            if (pokemon[i] == null) {
                return i+1;
            }
        }
        return 0;
    }

    /**
     * Removes a pokemon from the pokemon party.
     *
     * @param p - pokemon to be removed from the party
     */
    public void removePokemonFromParty(Pokemon p) {
        // TODO: remove a pokemon and its corresponding moveset
    }

    /**
     * Add a move to a pokemon in the pokemon party.
     *
     * @param p    - pokemon in the party to add the move to
     * @param move - move to be added to the pokemon
     * @return <code>true</code> if p is in party and move can be added to it and has been added
     * <code>false</code> if p is not in party or move is not valid for p or moveset is full
     */
    public boolean addMoveToPokemon(Pokemon p, Move move) {
        // TODO: verify that pokemon is in party
        // TODO: verify that move is allowed for pokemon
        // TODO: verify that moveset is not full
        // TODO: add move to moveset
        return true;
    }

    /**
     * Removes a move from a pokemon in the party.
     *
     * @param p    - pokemon to remove the move from
     * @param move - move to remove
     */
    public void removeMoveFromPokemon(Pokemon p, Move move) {
        // TODO: verify that the pokemon is in the party
        // TODO: verify that the pokemon has learned the move
        // TODO: remove the move
    }
}
